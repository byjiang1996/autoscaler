---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vpa-recommender
  namespace: cop-dev
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vpa-recommender
  namespace: cop-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vpa-recommender
  template:
    metadata:
      labels:
        app: vpa-recommender
    spec:
      serviceAccountName: vpa-recommender
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534 # nobody
      containers:
      - name: recommender
        image: container-image-registry.corp.linkedin.com:8083/temp/cortado/vpa-recommender-amd64:dev
        imagePullPolicy: Always
        args:
        - --v=4

        # prometheus configurations
        # - --storage=prometheus
        # - --prometheus-address=https://k8s-prometheus.stg.linkedin.com/ei-ltx1-k8s-0
        # - --history-length=14d
        # - --history-resolution=10m
        # - --prometheus-query-timeout=10m
        # - --container-pod-name-label=pod
        # - --container-name-label=container
        # - --metric-for-pod-labels=kube_pod_labels
        # - --pod-label-prefix=label_
        # - --pod-namespace-label=namespace
        # - --pod-name-label=pod

        # Linkedin k8s metrics API data is refreshed every 30s; set checkpoint write timeout to be 30s as well.
        - --recommender-interval=30s
        - --checkpoints-timeout=30s
        - --vpa-object-namespace=cop-dev

        # 90% target CPU percentile and 100% target memory percentile
        # set lowerbound, target and upperbound the same for less k8s vpa object updates
        # let Azkaban to decide safety recommendation margin
        # no confidence multiplier for less k8s vpa object updates:
        # lower bound and upper bound will not change over time if original values stay the same
        - --recommendation-lower-bound-cpu-percentile=0.9
        - --recommendation-target-cpu-percentile=0.9
        - --recommendation-upper-bound-cpu-percentile=0.9
        - --recommendation-lower-bound-memory-peak-percentile=1.0
        - --recommendation-target-memory-peak-percentile=1.0
        - --recommendation-upper-bound-memory-peak-percentile=1.0
        - --recommendation-margin-fraction=0
        - --recommendation-use-confidence-multiplier=false

        # decay_half = 60h, max_decay_exponent=7 and built-in 1e-4 epsilon forces 30d windowed recommendation
        - --memory-histogram-decay-half-life=60h
        - --cpu-histogram-decay-half-life=60h
        - --max-decay-exponent=7

        # each mem peak usage is aggregated per hour. gc vpa object if inactive for more than 90d (90=2160/24)
        - --memory-aggregation-interval=1h
        - --memory-aggregation-interval-count=2160
        - --recommendation-missing-max-duration=2160h

        # bump up mem for 2 times if OOM'd
        - --oom-bump-up-ratio=2
        - --oom-min-bump-up=0
        resources:
          limits:
            cpu: 4
            memory: 10Gi
          requests:
            cpu: 4
            memory: 10Gi
        ports:
        - containerPort: 8080
